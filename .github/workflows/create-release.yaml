name: Build and publish release

on:
  push:
    branches: ["main"]

jobs:
  unit-tests:
    uses: ./.github/workflows/unit-tests.yaml

  build-native-binaries:
    needs: unit-tests
    runs-on: ${{matrix.os}}
    strategy:
       matrix:
          os: [ubuntu-20.04, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'
      
      - name: restore and build
        run: |
          dotnet restore "./src/CertManagerAgent/CertManagerAgent.csproj"
          dotnet build "./src/CertManagerAgent/CertManagerAgent.csproj" -c Release

      - name: publish (linux)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          dotnet publish "./src/CertManagerAgent/CertManagerAgent.csproj" \
              -o ./publish/cert-manager-agent-linux-x64 /p:DebugType=None /p:DebugSymbols=false \
              -r linux-x64

      - name: publish (windows)
        if: matrix.os == 'windows-latest'
        run: |
          dotnet publish "./src/CertManagerAgent/CertManagerAgent.csproj" `
              -o ./publish/cert-manager-agent-windows-x64 /p:DebugType=None /p:DebugSymbols=false `
              -r win-x64

      - name: publish (macos)
        if: matrix.os == 'macos-latest'
        run: |
          dotnet publish "./src/CertManagerAgent/CertManagerAgent.csproj" \
              -o ./publish/cert-manager-agent-osx-x64 /p:DebugType=None /p:DebugSymbols=false \
              -r osx-x64

      - name: zip pubblish dir
        shell: pwsh
        run: |
          $publishDirs = Get-ChildItem ./publish/
          mkdir ./publish-zipped/
          $publishDirs | ForEach-Object {Compress-Archive -Path "$($_.FullName)/*" -DestinationPath "./publish-zipped/$($_.Name)" -Force}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cert-manager-agent-${{matrix.os}}
          path: ./publish-zipped/
          retention-days: 1
          overwrite: true
          if-no-files-found: error

  build-containers-and-publish:
    permissions:
      contents: write
      packages: write
      issues: read
    runs-on: ubuntu-latest
    needs: build-native-binaries

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build images
        run: |
          docker build --file "./src/CertManager/Dockerfile" -t desmaraisp/cert-manager:latest .
          docker build --file "./src/CertManagerAgent/Dockerfile" -t desmaraisp/cert-manager-agent:latest .

      - name: Create migration image
        run: |
          docker build --file "./src/CertManager/Dockerfile.migrations" -t desmaraisp/cert-manager-migrations:latest \
                --build-arg provider=SqlServer .
      
      - name: Create migration scripts
        run: |
          dotnet tool restore
          dotnet ef migrations script --idempotent --output ./cert-manager-db-migration-mssql.sql \
              --project ./src/CertManager/CertManager.csproj -- --provider SqlServer
          dotnet ef migrations script --idempotent --output ./cert-manager-db-migration-postgresql.sql \
              --project ./src/CertManager/CertManager.csproj -- --provider Postgresql

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./native-binaries

      - name: Semantic release
        id: semantic-release
        uses: cycjimmy/semantic-release-action@v4
        env:
          DOCKER_USERNAME: USERNAME
          DOCKER_PASSWORD: ${{secrets.GITHUB_TOKEN}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          extra_plugins: |
            "@semantic-release-plus/docker"